<?php

/**
 * @file
 * Ding Serendipity plugins related to ting_entity landing pages.
 *
 * Example:
 *  On a certain material landing page /ting/object/870970-basis%3A22629344
 *  We would like to present related materials from same author, same type or
 *  via ADHL or ADHR
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_serendipity_ting_entity_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_serendipity_info().
 */
function ding_serendipity_ting_entity_serendipity_info() {
  $items = array(
    'ting_object_author' => array(
      'title' => 'Ting Objects related by same author',
      'description' => 'Search Broenden for objects with same author',
      'keys' => array('ting_object_id'),
    ),
    'ting_object_subject' => array(
      'title' => 'Ting Objects related by same subject',
      'description' => 'Search Broenden for objects with same subject',
      'keys' => array('ting_object_id'),
    ),
    'ting_object_type' => array(
      'title' => 'Ting Objects related by same type',
      'description' => 'Search Broenden for objects with same type',
      'keys' => array('ting_object_id'),
    ),
    'ting_object_publisher' => array(
      'title' => 'Ting Objects related by same publisher',
      'description' => 'Search Broenden for objects with same publisher',
      'keys' => array('ting_object_id'),
    ),
    'ting_object_adhl' => array(
      'title' => 'Ting objects via ADHL service on current object',
      'description' => 'Call ADHL service on the current object',
      'keys' => array('ting_object_id'),
      'settings' => 'ding_serendipity_ting_entity_adhl_settings',
    ),
  );

  return $items;
}

/**
 * Add settings for the adhl callback to the serendipity info array.
 */
function ding_serendipity_ting_entity_adhl_settings() {
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $types = variable_get('ting_well_types', array());
  $form['ding_serendipity_ting_entity_adhl_accepted_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Accepted adhl types'),
    '#options' => drupal_map_assoc(array_keys($types)),
    '#default_value' => variable_get('ding_serendipity_ting_entity_adhl_accepted_types', array()),
  );
  
  return system_settings_form($form);
}

/**
 * Implements hook_PLUGIN_NAME_serendipity_add().
 */
function ding_serendipity_ting_entity_ting_object_author_serendipity_add($context) {
  $results = array();
  // Ensure that the active page is a ting_object
  if (!isset($context['ting_object_id'])) {
    return $results;
  }

  $obj = ding_entity_load($context['ting_object_id'], 'ting_object');

  // Set the creator if such entry exists.
  $creators = $obj->getCreators();
  
  if (empty($creators)) {
    return $results;
  }
  
  foreach ($creators as & $creator) {
    $creator = 'facet.creator="' . $creator . '"';
  }
  
  $query = implode(' AND ', $creators);
  
  $results = ding_base_do_search($query, array());
  foreach($results as &$item) {
    $item['info'] = array(
      'description' =>  t('This material has been selected based on the authors of the material you are viewing.'),
    );
  }
  return $results;
}

/**
 * Implements hook_PLUGIN_NAME_serendipity_add().
 */
function ding_serendipity_ting_entity_ting_object_subject_serendipity_add($context) {
  $results = array();

  // Ensure that the active page is a ting_object
  if (!isset($context['ting_object_id'])) {
    return $results;
  }

  $obj = ding_entity_load($context['ting_object_id'], 'ting_object');

  // Build subject array.
  $subject = $obj->getSubjects();

  // Create the query.
  foreach ($subject as & $facet) {
    $facet = 'facet.subject="' . $facet . '"';
  }
  
  // Search with only subjects.
  $query = implode(' OR ', $subject);
  if (!empty($query)) {
    $results = ding_serendipity_do_search($query, array());
    foreach ($results as & $item) {
      $item['info'] = array(
        'description' => t('This material has been selected based on the subjects of the material you are viewing.'),
      );
    }
  }
  
  return $results;
}

/**
 * Implements hook_PLUGIN_NAME_serendipity_add().
 */
function ding_serendipity_ting_entity_ting_object_type_serendipity_add($context) {
  $results = array();

  // Ensure that the active page is a ting_object.
  if (!isset($context['ting_object_id'])) {
    return $results;
  }

  $obj = ding_entity_load($context['ting_object_id'], 'ting_object');

  // Set the creator if such entry exists.
  $type = $obj->getType();
  if (empty($type) || $type == 'bog') {
    return $results;
  }
  
  if ($type) {
    $query = 'dc.type="' . $type . '"';
    $query = ding_list_convert_cql($query);
    $results = ding_serendipity_do_search($query, array());
    foreach ($results as & $item) {
      $item['info'] = array(
        'description' => t('This material has been selected based on the type of the material you are viewing.'),
      );
    }
  }
  
  return $results;
}

/**
 * Implements hook_PLUGIN_NAME_serendipity_add().
 */
function ding_serendipity_ting_entity_ting_object_publisher_serendipity_add($context) {
  $results = array();
  // Ensure that the active page is a ting_object
  if (!isset($context['ting_object_id'])) {
    return $results;
  }

  $obj = ding_entity_load($context['ting_object_id'], 'ting_object');

  // Set the creator if such entry exists.
  $publisher = $obj->getPublisher();
  if (!$publisher) {
    return $results;
  }

  $query = 'dc.publisher="' . $publisher . '"';
  $query = ding_list_convert_cql($query);
  $results = ding_serendipity_do_search($query, array());
  foreach ($results as & $item) {
    $item['info'] = array(
      'description' => t('This material has been selected based on the publisher of the material you are viewing.'),
    );
  }
  
  return $results;
}

/**
 * Implements hook_PLUGIN_NAME_serendipity_add().
 */
function ding_serendipity_ting_entity_ting_object_adhl_serendipity_add($context) {
  $results = array();

  // Ensure that the active page is a ting_object.
  if (!isset($context['ting_object_id'])) {
    return $results;
  }

  $obj = ding_entity_load($context['ting_object_id'], 'ting_object');

  // Get accepted ting types.
  $accepted_types = variable_get('ding_serendipity_ting_entity_adhl_accepted_types', array());
  if (!empty($obj) && isset($accepted_types[$obj->getType()]) && $accepted_types[$obj->getType()]) {
    $record = $obj->getRecord();

    // Lookup in ADHL service.
    $request = ting_get_request_factory()->getObjectRecommendationRequest();
    if (isset($record['dc:identifier']['dkdcplus:ISBN'])) {
      $request->setIsbn($record['dc:identifier']['dkdcplus:ISBN']);
      $request->setNumResults(10);

      if (($agency = variable_get('ting_agency', '')) != '') {
        $agency .= ':';
      }

      /**
       * @TODO: Later. Create the ting_object id correct instead of hardcoded
       *        "870970-basis:", but ding_provider_build_entity_id doesn't
       *        work.
       */
      $agency = '870970-basis:';
      $recommendations = ting_execute_cache($request);
      foreach ($recommendations as $recommendation) {
        $results[] = array(
          'type' => 'ting_object',
          'id' => $agency . $recommendation->localId,
          'info' => array(
            'adhl' => 'adhl',
          ),
        );
      }
    }
  }

  return $results;
}

/**
 * Implements hook_ding_serendipity_results_alter().
 */
function ding_serendipity_ting_entity_ding_serendipity_results_alter(&$results) {
  $context = $results['context'];
  if (isset($context['ting_object_id'])) {
    $id = $context['ting_object_id'];

    // Remove current item if it is in the result list.
    foreach ($results['items'] as $key => $item) {
      if ($item['id'] == $id) {
        unset($results['items'][$key]);
      }
    }
  }
}
