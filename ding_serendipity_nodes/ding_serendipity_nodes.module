<?php
/**
 * @file
 * Serendipity for nodes.
 *
 * This module provides Serendipity for nodes.
 */

/**
 * Implements hook_serendipity_info().
 */
function ding_serendipity_nodes_serendipity_info() {
  return array(
    'by_bundle' => array(
      'title' => 'Nodes by bundle',
      'description' => 'Find nodes matching the context bundle',
      'keys' => array('node'),
    ),
  );
}

/**
 * Implements hook_PLUGIN_NAME_serendipity_add().
 *
 * Find related nodes to node in $context.
 */
function ding_serendipity_nodes_by_bundle_serendipity_add($context) {
  $results = array();

  // Ensure that the context is set.
  if (!is_numeric($context['node_nid'])) {
    return array();
  }

  // Load node.
  $node = node_load($context['node_nid']);
  // Get the related content field.
  $content = field_get_items('node', $node, 'field_related_content');
  if (!empty($content)) {
    // Iterate through the items.
    foreach ($content as $key => $item) {
      // Add it to the results.
      $results[] = array(
        'type' => 'node',
        'id' => $item['target_id'],        
      );
    }
  }

  if (!empty($node->field_use_serendipity)) {
    $val = $node->field_use_serendipity[field_language('node', $node, 'field_use_serendipity')][0]['value'];
    if ($val) {
      return $results;
    }
  }

  $similar_nodes = ding_similarterms_list('all', $node->nid);
  foreach ($similar_nodes as $snode) {
    $results[] = array(
      'type' => 'node',
      'id' => $snode->nid,
      'info' => array(
        'description' => t('Related to this content.'),
      ),
    );
  }
  return $results;
}
