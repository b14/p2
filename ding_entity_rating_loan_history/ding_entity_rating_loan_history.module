<?php

/**
 * @file
 * Implement ding_interaction plugin to display recent loans for rating.
 */

define('DING_ENTITY_RATING_LOAN_HISTORY_MAX_AMOUNT', 5);

/**
 * Implements hook_ding_interaction_info().
 */
function ding_entity_rating_loan_history_ding_interaction_info() {
  $active = (user_is_logged_in() && ding_user_consent_has_consent('loan_history_store'));
  $previous_loans = "user";

  return array(
    'title' => t('Rate your previous loans'),
    'active' => $active,
    'more_title' => t('Lookup your previous loans'),
    'more_url' => $previous_loans,
  );
}

/**
 * Implements hook_ding_interaction_view().
 */
function ding_entity_rating_loan_history_ding_interaction_view($count = DING_ENTITY_RATING_LOAN_HISTORY_MAX_AMOUNT) {
  if (user_is_logged_in()) {
    // Get entities to rated based on loan history.
    $objects = ding_entity_rating_loan_history_get_suggested_entities($count);
    if (!empty($objects)) {
      $view_objects = array();
      foreach ($objects as $obj) {
        $view_objects[] = ding_entity_view($obj, 'compact');
      }

      $car = array('#theme' => 'ting_carousel', '#objects' => $view_objects);
      return render($car);
    }
  }
  return '';
}

/**
 * Get suggested entities to rate.
 *
 * Retrieve a list of ting entities to rate, based on the users loan history.
 *
 * @param int $count
 *   Number of suggestions to get.
 *
 * @return array
 *   An array of TingObjects.
 */
function ding_entity_rating_loan_history_get_suggested_entities($count = DING_ENTITY_RATING_LOAN_HISTORY_MAX_AMOUNT) {
  // Get user loan history.
  $user_history_list = ding_list_get_lists(DING_LIST_TYPE_LOAN_HISTORY);
  $objects_to_load = array();

  if (ding_user_consent_has_consent('loan_history_store') && !empty($user_history_list)) {
    $history_list = current($user_history_list);
    $list_elements = ding_list_load_elements($history_list);

    // Newest first.
    krsort($list_elements);

    // Extract all ting object ids from the loan history.
    $object_ids = array();

    foreach ($list_elements as $element) {
      $ting_object_id = ding_list_get_list_element_value($element);
      $conv_id = ding_list_convert_cql($ting_object_id);

      $object_ids[] = $conv_id;
    }

    // Remove entities which have already been rated.
    $object_ids = ding_entity_rating_loan_history_filter_by_rated($object_ids);

    // Collect entities for rating.
    while (count($objects_to_load) < $count && !empty($object_ids)) {
      $rand_obj = array_rand($object_ids);
      $obj_id = $object_ids[$rand_obj];
      unset($object_ids[$rand_obj]);

      $ting_object = ding_entity_load($obj_id);
      if (ding_entity_rating_loan_history_filter_by_interests($ting_object)) {
        $objects_to_load[] = $ting_object;
      }
    }

    $object_ids = array_unique($object_ids);
    foreach ($object_ids as $obj_id) {
      $ting_object = ding_entity_load($obj_id);
      if (count($objects_to_load) < $count && ding_entity_rating_loan_history_filter_by_interests($ting_object)) {
        $objects_to_load[] = $ting_object;
      }
    }
  }

  return $objects_to_load;
}

/**
 * Filter list by previously rated entities.
 *
 * Remove all ids from the supplied array, which correspond with an entity in
 * the users rating list.
 *
 * @param array $ids
 *   An array of TingObject ids.
 *
 * @return array
 *   An array of TingObject ids.
 */
function ding_entity_rating_loan_history_filter_by_rated($ids) {
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST);
  foreach ($ids as $key => $id) {
    if ($element = ding_list_has_ding_list_element($list, 'ting_object', $id)) {
      unset($ids[$key]);
    }
  }
  return $ids;
}

/**
 * Check if TingObject matches the users interests.
 *
 * @param object $ting_object
 *   The ting object to test for matches
 *
 * @return bool
 *   TRUE is there are no matches and FALSE if there are.
 */
function ding_entity_rating_loan_history_filter_by_interests($ting_object) {
  // Get the list on subjects which the user is not interested in.
  $interests = ding_interests_get_list_elements('no');

  // Load terms.
  $terms = taxonomy_term_load_multiple($interests);
  $term_names = array();
  foreach ($terms as $term) {
    $term_names[] = $term->name;
  }

  // Build list of ting objects subjects.
  $historical_terms = array();
  $subject = $ting_object->getSubjects();

  $historical_terms = array_merge($historical_terms, $subject);
  $type = $ting_object->getType();

  $historical_terms = array_merge($historical_terms, array($type));
  $record = $ting_object->getRecord();

  if (isset($record['dc:subject']['dkdcplus:genre'])) {
    $genre = $record['dc:subject']['dkdcplus:genre'];
    $historical_terms = array_merge($historical_terms, $genre);
  }
  // Check if any of the not interests subjects match the ting objects subjects.
  if (in_array($historical_terms, $term_names)) {
    return FALSE;
  }

  return TRUE;
}
