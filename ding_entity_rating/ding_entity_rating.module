<?php

/**
 * @file
 * Ding entity rating module
 * User rating of ting_objects with storage in OpenList
 */

include_once 'ding_entity_rating.features.inc';
include_once 'ding_entity_rating.serendipity.inc';

// Ding rating list.
define('DING_ENTITY_RATING_LIST', 'ratings');

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_entity_rating_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_menu().
 */
function ding_entity_rating_menu() {
  $items = array();
  
  // Add to list callback.
  $items['ding_entity_rating/%ctools_js/%ting_object/%user/%'] = array(
    'title' => 'Ding entity rating add to list',
    'page callback' => 'ding_entity_rating_add_to_list_callback',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('rate ding content'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_entity_rating_permission() {
  return array(
    'rate ding entities' => array(
      'title' => t('Rate ding entities'),
    ),
  );
}

/**
 * Implements hook_secure_permissions().
 */
function ding_entity_rating_secure_permissions($role) {
  $permissions = array(
    'authenticated user' => array('rate ding entities'),
    // TODO: If authenticated user has access then permissions for all other
    // roles except anonymous user is unnecessary.
    'editor' => array('rate ding entities'),
    'local editor' => array('rate ding entities'),
    'guest blogger' => array('rate ding entities'),
    'provider' => array('rate ding entities'),
    'staff' => array('rate ding entities'),
    'local administrator' => array('rate ding entities'),
    // TODO: There is no role in DDB CMS called developer
    'developer' => array('rate ding entities'),
  );
  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Add to list callback.
 *
 * @param bool $ajax
 *   If it's an ajax call or not.
 * @param object $entity
 *   The ting object to rate.
 * @param object $account
 *   The user account.
 * @param int $rating
 *   The given rating / weight.
 */
function ding_entity_rating_add_to_list_callback($ajax, $entity, $account, $rating) {
  if ($ajax) {
    // Add to interests list.
    // TODO: There seems to be no access check for determining whether
    // the current user is allowed to rate for the account.
    // Currently any user seems to be able to add a rating for any other user
    // through url manipulation.
    ding_entity_rating_add_to_list($entity, $account, $rating);
    
    // Build response.
    // TODO How about adding a theme function for this?
    // Nitpicking: Typo in reposonse
    $output = '<div class="ding-entity-rating-respons">' . t('Thank you for your input') . '</div>';
    
    // Return response.
    print $output;
    drupal_exit();
  }
  else {
    // TODO: We do nothing if this is not AJAX. Is this intentional?
    // I would think we could call ding_entity_rating_add_to_list() regardless
    // and redirect to the refererer, the entity or something like that
    // for non-AJAX requests.
    return '';
  }
}

/**
 * Implements hook_ding_list_operations().
 *
 * @see ding_list_list_operations()
 */
function ding_entity_rating_ding_list_operations() {
  return array(
    DING_ENTITY_RATING_LIST => array(
      DING_LIST_OPERATION_DETACH => TRUE,
      DING_LIST_OPERATION_SORT => TRUE,
      DING_LIST_OPERATION_AUTO_CREATE => TRUE,
      '_data' => array(
        'default_title' => t('Ratings'),
        'description' => t('This is the list of materials you have rated. Rate materials and get recommendations for similar content.'),
      ),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function ding_entity_rating_field_extra_fields() {
  $extra = array();
  
  // Add the rating form and options to ting objects display.
  // TODO Why is this implemented using hook_field_extra_fields?
  // We would normally use virtual field to achieve this.
  $extra['ting_object']['ting_object'] = array(
    'form' => array(
      'ding_entity_rating_result' => array(
        'label' => t('Ding entity rating results'),
        'description' => t('Average result of all ratings given to this entity'),
        'weight' => 0,
      ),
      'ding_entity_rating_action' => array(
        'label' => t('Ding entity rating action'),
        'description' => t('Enables the users to rate this entity'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'ding_entity_rating_result' => array(
        'label' => t('Ding entity rating result'),
        'description' => t('Average result of all ratings given to this entity'),
        'weight' => 0,
        'visible' => FALSE,
      ),
      'ding_entity_rating_action' => array(
        'label' => t('Ding entity rating action'),
        'description' => t('Enables the users to rate this entity'),
        'weight' => 0,
        'visible' => FALSE,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function ding_entity_rating_entity_view($entity, $type, $view_mode, $langcode) {
  // Only add if the current entity is TingEntity.
  if ($entity instanceof TingEntity) {
    // Get the fields which are displayed with this view mode.
    $fields = field_extra_fields_get_display('ting_object', 'ting_object', $view_mode);

    // Add the rating form to the ting entity view_mode.
    if (isset($fields['ding_entity_rating_action']) && $fields['ding_entity_rating_action']['visible']) {
      if (is_object($entity)) {
        // Create a fake field.
        $entity->content['ding_entity_rating_action'] = array(
          '#theme' => 'field',
          '#label_hidden' => FALSE,
          '#label' => t('Rate this'),
          '#items' => array(theme('ding_entity_rating_display', array('entity' => $entity))),
          '#weight' => $fields['ding_entity_rating_action']['weight'],
          '#bundle' => 'ting_object',
          '#field_name' => 'ding_entity_rating',
          '#field_type' => 'text',
          '#label_display' => TRUE,
          '#title' => 'Title not used.',
          '#view_mode' => $view_mode,
          0 => array('#markup' => theme('ding_entity_rating_display', array('entity' => $entity))),
        );
      }
    }
  }
}

/**
 * Check if the current user has rated an entity.
 *
 * @param object $entity
 *   The ting object entity to remove from the rating list.
 *
 * @return bool
 *   TRUE if the user has rated the entity and FALSE if not.
 */
function ding_entity_rating_user_has_rated($entity) {
  // Get the rating list.
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST);
  $result = FALSE;
  $element = ding_list_has_ding_list_element($list, 'ting_object', $entity->ding_entity_id);

  if ($element !== FALSE) {
    // TODO The naming here is confusing? Why is field_weight related to
    // whether the user has rated an entity?
    // Also: As far as I can tell this allows the function to return non-boolean
    // values. This goes against the DocBlock and the function name
    // user_*has*_rated.
    // I would prefer an integer return value and NULL if the user has not
    // rated the entity.
    $result = ding_base_get_value('ding_type', $element, 'field_weight');
  }
  
  return $result;
}

/**
 * Implements hook_theme.
 */
function ding_entity_rating_theme($existing, $type, $theme, $path) {
  return array(
    'ding_entity_rating_display' => array(
      'variables' => array('entity' => NULL),
    ),
    'ding_entity_rating_average' => array(
      'variables' => array('rating' => NULL),
    ),
    'ding_entity_rating_ding_user_complete_description' => array(
      'variables' => array('history_list' => NULL),
    ),
  );
}

/**
 * Theme function for theme_ding_entity_rating_ding_user_complete_description.
 */
function theme_ding_entity_rating_ding_user_complete_description($variables) {
  //TODO It would add more flexibility to this theme function if the account
  // was provided as an argument instead of using a global variable.
  global $user;
  $uid = $user->uid;
  // TODO: How can $history_list be defined at this point?
  $history_button = isset($history_list) ? "<li>" . l(t("Rate previous loans"), "list/" . $history_list->id) . "</li>" : "";
  
  return "<div class='description'>" .
    t('You could rate materials to give us an idea of your preferences.') .
    "</div><ul class='actions'><li>" . l(t("Rate your current loans"), "user/$uid/status/loans") . "</li>" .
    $history_button .
    "</ul>";
}

/**
 * Preprocessor for ding_entity_rating_display.
 */
function template_preprocess_ding_entity_rating_display(&$variables) {
  global $user;
  $entity = $variables['entity'];
  
  // Add styling and javascript.
  // TODO It would be preferable if these assets were added using
  // #attached and the theme function returned a render array
  // Example: http://www.vdmi.nl/blog/drupal-attached.
  $module_path = drupal_get_path('module', 'ding_entity_rating');
  drupal_add_css($module_path . '/css/ding_entity_rating.css');
  drupal_add_js($module_path . '/js/ding_entity_rating.js');

  $variables['rating'] = ding_entity_rating_user_has_rated($entity);
  
  // If the user hasn't rated and this isn't the rating list itself, enable
  // rating.
  if (!ding_entity_rating_is_rating_list()) {
    $variables['classes_array'][] = 'ding-entity-rating-submitted';
  }
  else {
    $variables['classes_array'][] = 'ding-entity-rating';
  }

  if (user_access('rate ding entities')) {
    $variables['classes_array'][] = 'rateable';
  }

  $variables['path'] = $entity->ding_entity_id . '/' . $user->uid;

  $variables['avg'] = 0;
  // If the user has not rated the entity then display an average.
  if ($variables['rating'] === FALSE) {
    $variables['avg'] = ding_entity_rating_get_average($entity);
    $variables['rating'] = ($variables['avg']) ? round($variables['avg']) : -1;
  }
}

/**
 * Theme function for ding_entity_rating_display.
 */
function theme_ding_entity_rating_display($variables) {
  $output = '<div class="' . implode(' ', $variables['classes_array']) . '" data-ding-entity-rating-path="' . $variables['path'] . '">';
  
  for ($i = 1; $i < 6; $i++) {
    $classes = array('fa', 'fa-star-o', 'star');
    if ($i <= $variables['rating']) {
      $classes[] = 'submitted';
    }
    $output .= '<i class="' . implode(' ', $classes) . '"></i>';
  }
  
  // Add average value if the entity has ratings already.
  if (!empty($variables['avg'])) {
    $output .= '<span class="ding-entity-rating-avg">' . t('Average:') . ' ' . round($variables['avg'], 2) . '</span>';
  }
  
  return $output . '</div>';
}

/**
 * Preprocessor for ding_entity_rating_average
 */
function template_preprocess_ding_entity_rating_average(&$variables) {
  // TODO see comment regarding render arrays and #attached.
  drupal_add_css(drupal_get_path('module', 'ding_entity_rating') . '/css/ding_entity_rating.css');
}

/**
 * Theme function for ding_entity_rating_average.
 */
function theme_ding_entity_rating_average($variables) {
  $output = '<div class="ding-entity-rating-submitted">';

  // TODO This is duplicared from theme_ding_entity_rating_display.
  // How about moving it to a shared function?
  $rating = round($variables['rating']);
  for ($i = 1; $i < 6; $i++) {
    $classes = array('fa', 'fa-star-o', 'star');
    if ($i <= $rating) {
      $classes[] = 'submitted';
    }
    $output .= '<i class="' . implode(' ', $classes) . '"></i>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Check if the current path is a rating list path.
 *
 * @return bool
 *   TRUE if this is a rating list and FALSE if not.
 */
function ding_entity_rating_is_rating_list() {
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST);
  // TODO Could be refactored as so for simplicity.
  return arg(0) == 'list' && arg(1) == $list->id;
}

/**
 * Retrieve the average rating of a ting object entity.
 *
 * @param object $entity
 *   The ting object entity to remove from the rating list.
 *
 * @return int
 *   The average rating of the given entity.
 */
function ding_entity_rating_get_average($entity) {
  $query = db_select('field_data_field_weight', 'w');
  $query->join('eck_ding_type', 'dt', 'w.entity_id = dt.id');
  $query->join('field_data_field_value', 'v', 'w.entity_id = v.entity_id');
  $query->condition('v.field_value_value', $entity->ding_entity_id)
    ->addExpression('AVG(w.field_weight_value)', 'avg_count');
  $result = $query->execute();

  return $result->fetchField(0);
}

/**
 * Add entity from the rating list.
 *
 * @param object $entity
 *   The ting object entity to add to the rating list.
 * @param object $account
 *   The user account who's rating list to use.
 * @param int $rating
 *   The rating given to the ting object entity.
 *
 * TODO: There is no return value for this. What if it fails?
 */
function ding_entity_rating_add_to_list($entity, $account, $rating) {
  // Get the rating list.
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST, $account);
  $element = ding_list_has_ding_list_element($list, 'ting_object', $entity->ding_entity_id);
  if (!$element) {
    $values = array(
      'value' => $entity->ding_entity_id,
      'weight' => $rating,
    );
    ding_list_create_ding_list_element($list, 'ting_object', $values, $account, TRUE);
  }
  else {
    $values = array(
      'value' => $entity->ding_entity_id,
      'weight' => $rating,
    );
    ding_list_edit_ding_list_element($element, 'ting_object', $values);
  }
}

/**
 * Remove entity from the rating list.
 *
 * @param object $entity
 *   The ting object entity to remove from the rating list.
 * @param object $account
 *   The user account who's rating list to use.
 *
 * TODO: There is no return value for this. What if it fails?
 */
function ding_entity_rating_remove_from_list($entity, $account) {
  // Get the rating list.
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST, $account);
  if ($element = ding_list_has_ding_list_element($list, 'ting_object', $entity->ding_entity_id)) {
    ding_list_detach_ding_list_element($list, array($element->id));
  }
}

/**
 * Implements hook_ding_user_complete().
 */
function ding_entity_rating_ding_user_complete() {
  // TODO: Two variables $list and $uid are not used here?
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST);
  $complete = FALSE;
  
  global $user;
  $uid = $user->uid;

  $user_history_list = ding_list_get_lists(DING_LIST_TYPE_LOAN_HISTORY);
  $history_list = current($user_history_list);
  
  return array(
    'ding_entity_rating' => array(
      'title' => t('It pays to judge'),
      'points' => 3,
      'completed' => $complete,
      'markup' => theme('ding_entity_rating_ding_user_complete_description', array('history_list' => $history_list)),
    ),
  );
}

/**
 * Return a list of loans not yet rated.
 *
 * @return array
 *   An array of ding_entity_id's which have yet to be rated by the active user.
 */
function ding_entity_rating_get_loans_not_rated() {
  global $user;
  $unrated = array();
  if (ding_user_is_provider_user($user)) {
    // TODO: Why ding_provider_invoke_page? I would think ding_provider_invoke
    // was sufficient.
    $loans = ding_provider_invoke_page('loan', 'list', $user);
    $list = ding_list_get_list(DING_ENTITY_RATING_LIST, $user);
    foreach ($loans as $loan) {
      if (!$element = ding_list_has_ding_list_element($list, 'ting_object', $loan->ding_entity_id)) {
        $unrated[] = $loan->ding_entity_id;
      }
    }
  }
  return $unrated;
}
